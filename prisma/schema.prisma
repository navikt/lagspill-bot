generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}
datasource db {
  provider = "postgresql"
  url      = env("LAGSPILL_BOT_DB_URL")
}

model Channel {
  id                Int             @id @default(autoincrement())
  // Slack channel ID,
  slackChannelId    String
  name              String
  gameCategories    GameCategory[]
}

model GameTeam {
  id            Int         @id @default(autoincrement())
  members       Person[]
  score         Int?
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId        Int
  placement     Int?
}

model GameCategory {
  id                Int             @id @default(autoincrement())
  games             Game[]
  name              String
  channel           Channel         @relation(fields: [channelId], references: [id])
  channelId         Int
  gamelink          String?
}

model Game {
  id                Int             @id @default(autoincrement())
  teams             GameTeam[]
  status            Status          @default(OPEN)
  gameCategory      GameCategory    @relation(fields: [gameCategoryId], references: [id])
  gameCategoryId    Int
  date              DateTime?       @default(now())
}


model WaitingPerson {
  userId            Int
  gameId            Int
  isAtOffice        Boolean

  @@id([userId, gameId])
}

model Person {
  id                Int             @id @default(autoincrement())
  // Slack user ID, only used to keep answers unique per user
  slackUserId       String
  name              String?
  displayName       String?
  anonymous         Boolean         @default(false)
  gameTeams         GameTeam[]
}

enum Status {
  OPEN
  ACTIVE
  CLOSED
}